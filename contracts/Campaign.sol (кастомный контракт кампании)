// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Campaign is Ownable {
    IERC20 public token;
    uint256 public target;
    uint256 public deadline;
    address public beneficiary;
    bool public paused;

    mapping(address => uint256) public contributions;

    constructor(IERC20 _token, address _beneficiary, uint256 _target, uint256 _deadline) {
        token = _token;
        beneficiary = _beneficiary;
        target = _target;
        deadline = _deadline;
    }

    function contribute(uint256 amount) external {
        require(!paused, "Campaign paused");
        require(block.timestamp <= deadline, "Deadline passed");
        token.transferFrom(msg.sender, address(this), amount);
        contributions[msg.sender] += amount;
    }

    function withdraw() external {
        require(msg.sender == beneficiary, "Only beneficiary");
        require(token.balanceOf(address(this)) >= target, "Target not reached");
        token.transfer(beneficiary, token.balanceOf(address(this)));
    }

    function refund() external {
        require(block.timestamp > deadline, "Campaign active");
        uint256 amount = contributions[msg.sender];
        contributions[msg.sender] = 0;
        token.transfer(msg.sender, amount);
    }

    function setPaused(bool _paused) external onlyOwner { paused = _paused; }
}
