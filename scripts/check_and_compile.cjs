const fs = require('fs');
const { exec } = require('child_process');

const folders = ['artifacts', 'typechain-types'];

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
function checkFolder(folder) {
  return fs.existsSync(folder) && fs.lstatSync(folder).isDirectory();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
let missing = folders.filter(folder => !checkFolder(folder));

if (missing.length === 0) {
  console.log('‚úÖ –í—Å–µ –ø–∞–ø–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: artifacts/ –∏ typechain-types/');
  process.exit(0);
} else {
  console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–ø–∫–∏:', missing.join(', '));
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é Hardhat...');

  // –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
  const compile = exec('npx hardhat compile');

  compile.stdout.on('data', (data) => {
    process.stdout.write(data);
  });

  compile.stderr.on('data', (data) => {
    process.stderr.write(data);
  });

  compile.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      missing.forEach(folder => {
        if (checkFolder(folder)) {
          console.log(`‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${folder}/`);
        } else {
          console.log(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: ${folder}/`);
        }
      });
    } else {
      console.log(`‚ùå –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥: ${code}`);
    }
  });
}
