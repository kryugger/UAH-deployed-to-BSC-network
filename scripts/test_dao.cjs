const hre = require("hardhat");

async function main() {
  const [deployer] = await hre.ethers.getSigners();
  console.log("üë§ –ê–∫–∫–∞—É–Ω—Ç:", deployer.address);

  const DAO = await hre.ethers.getContract("DAO");
  const Token = await hre.ethers.getContract("UAHToken");

  // –ú–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≥–æ–ª–æ—Å
  const mintTx = await Token.mint(deployer.address, hre.ethers.parseEther("100"));
  await mintTx.wait();
  await Token.delegate(deployer.address);

  // –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
  const targets = [deployer.address];
  const values = [0];
  const calldatas = ["0x"];
  const description = "üìú –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å";

  const proposeTx = await DAO.propose(targets, values, calldatas, description);
  const receipt = await proposeTx.wait();
  const proposalId = receipt.logs[0].args.proposalId;

  console.log("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:", proposalId.toString());

  // –ì–æ–ª–æ—Å—É–µ–º "–∑–∞"
  const voteTx = await DAO.castVote(proposalId, 1);
  await voteTx.wait();
  console.log("üó≥Ô∏è –ì–æ–ª–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
  const state = await DAO.state(proposalId);
  console.log("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", state);
}

main().catch((error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  process.exitCode = 1;
});